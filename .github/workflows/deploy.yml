# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build and Deploy App

on:
  push:
    branches: 
      - devel
      - stage
      - prod
  pull_request:
    branches: 
      - devel
  
jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./rdicidr-0.1.0

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 
      uses: actions/setup-node@v4
      with:
        node-version: "15.x"
    
    - name: Install dependencies
      run: npm ci

    - name: Install prettier
      run: npm install -g prettier
    
    - name: Linter (ESLint)
      run: npm run lint
    
    - name: Formatter (Prettier)
      run: npm run prettier
    
    - name: Test (Jest)
      run: CI=true npm run test

    - name: Build 
      run: npm run build
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Create Workspace
      run: terraform workspace select -or-create devel

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -no-color 

    #   # On push to "devel", build or change infrastructure according to Terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"devel"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false


